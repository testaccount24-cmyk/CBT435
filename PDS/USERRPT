/* REXX    USERRPT    Checks the list of current users against the
                      historical list to see if there are any new
                      entries.
           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20231102

     Impact Analysis
.    SYSEXEC   RUNDATA
.    SYSEXEC   TRAPOUT

     Modification History
     20231104 fxc alloc logdsn MOD if it exists;
     20240209 fxc log RUNDATA if log USERRPT;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240415 fxc DUMP_QUEUE quiet;

*/ arg argline
address TSO                            /* REXXSKEL ver.20230722      */
arg parms "((" opts
optstr = parms                         /* save for RUNDATA           */

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* initialization            -*/
call M_CHECK                           /* main process              -*/

if sw.0KeepLog then ,
   call ZB_SAVELOG                     /* save the log               */
if \sw.0nested then call DUMP_QUEUE 'quiet' /*                      -*/
exit                                   /*@ USERRPT                   */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   sw.0KeepLog = SWITCH( "LOG" )
   parse value "" with ,
               usrlist curusers newbies

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   vb4k.0    = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   vb4k.1    = "MOD"                   /* if it already exists...    */
   logdsn = "@LOG."exec_name"."subid".LIST"

   logpref = "("Branch( 'ID' )")"
   call ZL_LOGMSG( exec_name "started by" Userid()  yyyymmdd  hhmmss )
   call ZL_LOGMSG( logpref "Arg:" argline )

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
M_CHECK:                               /*@                           */
   if branch then call BRANCH
   address TSO

   call MA_GET_ARCHIVE                 /* get stored usrlist        -*/
   call ML_LIST_USERS                  /* get all active uids       -*/
   call MS_SET_NEW                     /* replace usrlist if nec    -*/

return                                 /*@ M_CHECK                   */
/*
.  ----------------------------------------------------------------- */
MA_GET_ARCHIVE:                        /*@                           */
   if branch then call BRANCH
   address TSO

   "NEWSTACK"
   "RUNDATA READ PROGRAM" exec_name,   /* populates usrlist          */
                     optstr
   do queued()
      pull tag tagval
      if tag = "<ERROR>" then do
         say tag tagval
         sw.0error_found = 1
         end
      else @z@ = Value( tag,tagval )   /* assign tagval to tag       */
   end                                 /* queued                     */
   "DELSTACK"

   logpref = "("Branch( 'ID' )")"
   if usrlist <> '' then do            /* old usrlist                */
      call ZL_LOGMSG( logpref "Original USRLIST: ("Words(usrlist)")",
                      usrlist )
      end

return                                 /*@ MA_GET_ARCHIVE            */
/*
.  ----------------------------------------------------------------- */
ML_LIST_USERS:                         /*@                           */
   if branch then call BRANCH
   address TSO

   rc = Outtrap("OUT.")                /* trap command output        */
   "LU  *"
   rc = Outtrap("OFF")

   do mx = 1 to out.0
      if Pos( "USER=",out.mx) > 0 then do
         parse var out.mx "USER=" uid .
         upper uid
         curusers = curusers uid       /* add to list                */
         pt = WordPos( uid,usrlist )
         if pt = 0 then                /* new user                   */
            newbies = newbies uid      /* add to list                */
         else,
            usrlist = DelWord( usrlist,pt,1 )
         end                           /* USER=                      */
   end                                 /* mx                         */

   logpref = "("Branch( 'ID' )")"
   if curusers <> '' then do
      call ZL_LOGMSG( logpref "Active Users: ("Words(curusers)")",
                      Space( curusers,1 ) )
      end

   if newbies  <> '' then do
      newct = Words( newbies )
      say newct "NEW userids detected."
      sw.0KeepLog = 1
      call ZL_LOGMSG( logpref "New Users: ("newct")",
                      Space( newbies,1 ) )
      end

   if usrlist  <> '' then do
      delct = Words( usrlist )
      say delct "DELETED userids detected."
      sw.0KeepLog = 1
      call ZL_LOGMSG( logpref "Deleted Users: ("delct")",
                      Space( usrlist,1 ) )
      end

return                                 /*@ ML_LIST_USERS             */
/*
.  ----------------------------------------------------------------- */
MS_SET_NEW:                            /*@                           */
   if branch then call BRANCH
   address TSO

   /* <usrlist> now holds the userids that have been deleted since the
      last run.  <newbies> are the userids that have been added since
      the last run.  <curusers> are the currently active userids.    */
   logpref = "("Branch( 'ID' )")"

   if newbies = '' then do
      msg =  "No new userids."
      say msg
      call ZL_LOGMSG( logpref msg  )
      end

   delusrs  = usrlist
   if delusrs =  '' then do
      msg = "No deleted userids."
      say msg
      call ZL_LOGMSG( logpref msg )
      end

   if Space( newbies usrlist,1 ) <> '' then do       /* changed      */
      usrlist = Space( curusers,1 )    /* replace                    */
      datastr = "USRLIST:"Space(  usrlist,1  )";",
                "USRCOUNT:"Words( curusers   )";",
                "NEWUSR:"Space(   newbies,1  )";",
                "DELUSR:"Space(   delusrs,1  )";"
      "NEWSTACK"
      "RUNDATA WRITE PROGRAM" exec_name "DATA(" datastr ")",
                     optstr
      do queued()
         parse pull line
         say line
      end                              /* queued                     */
      "DELSTACK"
      end

return                                 /*@ MS_SET_NEW                */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   tempstat = Sysdsn(logdsn) = "OK"    /* 1=exists, 0=missing        */
   "ALLOC FI(@LOG) DA("logdsn") REU" vb4k.tempstat
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#  msglim
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      if monitor then say,
         slug
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */

say "                                                                          "
say "  "ex_nam"      discovers newly-added and newly-deleted userids (as       "
say "                compared to the prior execution of "exec_name").          "
say "                                                                          "
say "  Syntax:   "ex_nam"  LOG                                                 "
say "                                                                          "
say "            LOG       (Optional) causes the LOG file to be produced       "
say "                      unconditionally.  Normally, the LOG file is not     "
say "                      produced except in certain circumstances.  The      "
say "                      LOGfile name is                                     "
say "                      <userid>.@LOG."exec_name".<tmstamp>.LIST            "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  displays key information throughout processing.         "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the execution   "
say "                  into REXX TRACE Mode.                                   "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.0nested   = sysvar("SYSNEST") = "YES"
   sw.0batch    = sysvar("SYSENV")  = "BACK"
   sw.0inispf   = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
