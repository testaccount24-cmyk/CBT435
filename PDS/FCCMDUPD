/* REXX    FCCMDUPD   Install a command onto the user's personal command
                      table.  Such a command table is designed to be
                      activated by (e.g.) ADDCMDS.
           Use '(routine name)  ?' for HELP-text.
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|

           Written by Frank Clarke  rexxhead@yahoo.com  20010827

     Impact Analysis
.    SYSEXEC   TRAPOUT

     Modification History
     20011022 fxc error checking
     20020315 fxc delete existing before insert of new
     20230414 fxc adjust HELP; add monitoring
     20230420 fxc fixed faulty TBOPEN
     20230608 fxc use &ZUP/&ZCONT
     20230613 fxc add DEL to DEIMBED ALLOC
     20230726 fxc adjust HELP;
     20230806 fxc chg SYSPROC to SYSEXEC in Impact Analysis;
     20230808 fxc fix non-printable characters in panels;
     20240305 fxc align panel names;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240415 fxc DUMP_QUEUE quiet;

*/ arg argline
address ISPEXEC                        /* REXXSKEL ver.20010802      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */
"CONTROL ERRORS RETURN"                /* I'll handle my own         */
if rc <> 0 then return                 /* no ISPF environment?       */

call A_INIT                            /*                           -*/
                                    if \sw.0error_found then,
call B_DRAIN_QUEUE                     /*                           -*/
                                    if \sw.0error_found then,
call C_TABLE_OPS                       /*                           -*/

if \sw.nested then call DUMP_QUEUE 'quiet' /*                       -*/
exit                                   /*@ FCCMDUPD                  */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   if queued() <> 4 then do            /* wrong number of lines      */
      zerrsm = "Invalid input data"
      zerrlm = "The queue must have four (4) properly formatted",
               "lines in order for this process to work correctly."
      "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"
      end                              /* queued <> 4                */
   openmode.   = "WRITE"
   openmode.1  = "NOWRITE"

return                                 /*@ A_INIT                    */
/*
   Obtain ZCTVERB, ZCTTRUNC, ZCTACT, and ZCTDESC from the queue.
   There must be exactly four lines.
.  ----------------------------------------------------------------- */
B_DRAIN_QUEUE:                         /*@                           */
   if branch then call BRANCH
   address TSO

   parse pull zctverb
   parse pull zcttrunc
   parse pull zctact
   parse pull zctdesc
   if monitor then say,
      "ZCTVERB="zctverb   "  ",
      "ZCTTRUNC="zcttrunc "  ",
      "ZCTACT="zctact     "  ",
      "ZCTDESC="zctdesc   "  "

return                                 /*@ B_DRAIN_QUEUE             */
/*
   DEIMBED and LIBDEF local material.  Obtain ISPTLIB name and
   command-table name.  OPEN, LOAD, and CLOSE the command table.
   Scrubdown environment.
.  ----------------------------------------------------------------- */
C_TABLE_OPS:                           /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call CA_PROLOG                      /* DEIMBED and setup         -*/

   "ADDPOP ROW(8) COLUMN(5)"
   zwinttl = "Create Shortcut"
   "DISPLAY PANEL(INSTALL)"
   disp_rc = rc
   "REMPOP ALL"
   if cmdtbl = "" then,
      sw.0load_err = 1
   else ,
      cmdtbl = cmdtbl"CMDS"            /* TMPCMDS, maybe             */

   if \sw.0load_err then,
      call CL_LOAD_CMD                 /*                           -*/

   call CZ_EPILOG                      /*                           -*/

   if sw.0load_err then sw.0error_found = "1"
   else do
      zerrsm = "Shortcut created"
      zerrlm = "A command has been written to your personal command",
            "table as specified.  When activated, you may invoke",
            "this routine from Edit, Browse, or View."
      "SETMSG  MSG(ISRZ002)"
      end

return                                 /*@ C_TABLE_OPS               */
/*
   DEIMBED and LIBDEF local material.
.  ----------------------------------------------------------------- */
CA_PROLOG:                             /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call DEIMBED                        /*                           -*/

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("@ddn") STACK"
   end
   ddnlist = ddnlist dd

return                                 /*@ CA_PROLOG                 */
/*
   All command-table operations.
.  ----------------------------------------------------------------- */
CL_LOAD_CMD:                           /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call CLA_OPEN                       /*                           -*/
                                    if sw.0load_err then return
   call CLI_INSERT_CMD                 /*                           -*/
   call CLZ_CLOSE                      /*                           -*/

return                                 /*@ CL_LOAD_CMD               */
/*
   LIBDEF to the command-table and OPEN.  CREATE a new command table
   if necessary.
.  ----------------------------------------------------------------- */
CLA_OPEN:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   if tlibds = "" then do              /* completely missing         */
      sw.0load_err = 1
      return
      end

   if Sysdsn(tlibds) <> "OK" then do   /* doesn't exist?             */
      zerrsm = "Library?"
      zerrlm = "The datasetname specified is not available"
      "SETMSG MSG(ISRZ002)"
      sw.0load_err = "1"
      return
      end                           /* tlibds missing             */

   "LIBDEF  ISPTLIB  DATASET  ID("tlibds")   STACK"
   "TBSTATS" cmdtbl "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do                   /* not found at all           */
      "TBCREATE" cmdtbl "WRITE NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)"
      if rc > 4 then do
         zerrsm = "Oops"
         zerrlm = "TBCREATE failed for "cmdtbl
         "SETMSG MSG(ISRZ002)"
         sw.0load_err = "1"
         end                     /* rc > 4                     */
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   cmdtbl openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" cmdtbl "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         end
      end
   else "TBTOP" cmdtbl
   "LIBDEF  ISPTLIB  "

return                                 /*@ CLA_OPEN                  */
/*
   Purge any existing copies of this command, then insert the queued
   command-table data to the command table.
.  ----------------------------------------------------------------- */
CLI_INSERT_CMD:                        /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   do forever                          /* drop duplicates            */
      "TBTOP"    cmdtbl
      "TBSCAN"   cmdtbl  "ARGLIST(ZCTVERB) NOREAD"
      if rc > 0 then leave
      "TBDELETE" cmdtbl
   end
   "TBADD"  cmdtbl

return                                 /*@ CLI_INSERT_CMD            */
/*
   Write the table to DASD.
.  ----------------------------------------------------------------- */
CLZ_CLOSE:                             /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "LIBDEF ISPTABL DATASET ID("tlibds") STACK"
   "TBCLOSE" cmdtbl
   "LIBDEF ISPTABL"

return                                 /*@ CLZ_CLOSE                 */
/*
   Scrubdown the environment by removing the LIBDEFs for local ISPF
   material.
.  ----------------------------------------------------------------- */
CZ_EPILOG:                             /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("@ddn")"
   end
   ddnlist = ddnlist dd

return                                 /*@ CZ_EPILOG                 */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
   Parse out the embedded components at the back of the source code.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  @ddn.  daid.

   address TSO

   fb80po.0  = "NEW DEL UNIT(VIO) SPACE(5 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   parse value ""   with  ddnlist @ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            @ddn = ddn || Random(999)
            @ddn.ddn = @ddn
            address TSO "ALLOC FI("@ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("@ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg; say ""
ex_nam = Left(exec_name,8)             /* predictable size           */

say "  "ex_nam"      Installs a command onto the user's personal command table "
say "                where it can be activated by (e.g.) ADDCMDS.              "
say "                                                                          "
say "  Syntax:   "ex_nam"  no parms                                            "
say "                                                                          "
say "            There must be exactly four (4) lines in the current stack     "
say "            representing ZCTVERB, ZCTTRUNC, ZCTACT, and ZCTDESC.  These   "
say "            will be used to populate the inserted row.                    "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR   displays key information throughout processing.         "
say "                                                                          "
say "        BRANCH    show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv  will use value following TRACE to place the execution in"
say "                  REXX TRACE Mode.                                        "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example                                                            "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*
))) PLIB     INSTALL   ..
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH ) CAPS( ON  ) JUST( LEFT  ) PAD( '_' )
  @ TYPE( OUTPUT ) INTENS( HIGH ) CAPS( ON  ) JUST( LEFT  )
  } TYPE( INPUT  ) INTENS( HIGH ) CAPS( ON  ) JUST( LEFT  )
)BODY WINDOW(68,5)
+
+ ISPTLIB DSN%==>}tlibds                                        +
+     ...CMDS%==>}z   +
+
)INIT
  .ZVARS   = '(CMDTBL)'
  .HELP    = INSTALH
  .CURSOR  = TLIBDS
)PROC
  VER (&TLIBDS,DSNAME)
  VER (&CMDTBL,NAME)
  VPUT (CMDTBL,TLIBDS) PROFILE
)END
))) PLIB     INSTALH   ..
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||)
%TUTORIAL |-| COMPILE -- Install Shortcut |-| TUTORIAL %Next Selection
===>_ZCMD

+
     Enter a Library datasetname and membername to identify your personal
     command table.  A shortcut will be generated at that location.

     If you do not have a personal command table, leave this information blank
     and the installation step will be skipped.

     It is%HIGHLY RECOMMENDED+that you have a personal command table which can
     be activated as by (e.g.) ADDCMDS.
)PROC
   &ZUP   = INSTALH
   &ZCONT = INSTALH
)END
*/
