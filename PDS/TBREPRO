/* REXX    TBREPRO    Make an exact copy of an ISPF table.  Use OPENTBLS
                      to locate the name of the source table.
           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20230112

     Impact Analysis
.    SYSEXEC   TRAPOUT
.    SYSEXEC   DFLTTLIB

     Modification History
     20230116 fxc allow outtbl to pre-exist.
     20230407 fxc adjust HELP
     20230809 fxc chg SYSPROC to SYSEXEC in Impact Analysis;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240618 fxc quote the return from DFLTTLIB;

*/ arg argline
address ISPEXEC                        /* REXXSKEL ver.19991109      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /*                           -*/

exit                                   /*@ TBREPRO                   */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   parse value "0 0 0 0 0 0 0"  with,
                ct.  .
   pluskeys  = KEYPHRS( "ADDKEYS" )    /*                            */
   plusnames = KEYPHRS( "ADDNAMES" )   /*                            */
   parse var info  intbl outtbl .      /* from- and to-table         */
   parse value outtbl  "@TMP"   with,
               outtbl   .

   call AB_BUILD_NEW                   /* build an empty table      -*/

return                                 /*@ A_INIT                    */
/*
   'intbl' is already open.  TBQUERY to get the shape.  TBCREATE the
   new table.  TBTOP, TBSKIP forever, TBPUT each new line.
.  ----------------------------------------------------------------- */
AB_BUILD_NEW:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBQUERY"  intbl  "KEYS(kvar)  NAMES(nvar)"
   parse var kvar "(" kvar ")"         /* no bananas                 */
   parse var nvar "(" nvar ")"         /* no bananas                 */

   kvar = kvar pluskeys
   nvar = nvar plusnames

   call ABO_OPEN_OUTPUT                /*                           -*/

   "TBTOP"    intbl
   do forever
      "TBSKIP" intbl  "SAVENAME(xvars)"
      if rc > 0 then leave             /* all done                   */
      ct.0rows   = ct.0rows + 1
      parse var  xvars "(" xvars ")"
      if xvars = "" then slug = ""
                    else slug = "SAVE("xvars")"
      if slug <> "" then ct.0xvars = ct.0xvars + 1
      "TBMOD"  outtbl   slug
   end                                 /* forever                    */
   "TBCLOSE"  outtbl                   /* save and close             */

   if sw.0Quiet = 1 then return
   zerrsm = "Read:" ct.0rows "  XVARS=" ct.0xvars
   zerrlm = ct.0rows "rows were read from table" intbl", and",
            ct.0xvars "of them contained extension variables."
   "SETMSG MSG(ISRZ002)"

return                                 /*@ AB_BUILD_NEW              */
/*
.  ----------------------------------------------------------------- */
ABO_OPEN_OUTPUT:                       /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPTLIB  DATASET  ID( "isptlib" )  STACK"
   "TBSTATS" outtbl "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" outtbl "will be created."
      say   zerrsm
      zerrlm = "Table" outtbl "will be created new."
      if sw.0Quiet = 0 then,
         "SETMSG  MSG(ISRZ002)"

      if kvar = '' then kspec = ''
      else kspec = "KEYS("kvar")"
      if nvar = '' then nspec = ''
      else nspec = "NAMES("nvar")"

      "TBCREATE" outtbl kspec  nspec "WRITE REPLACE"
      if rc > 0 then do
         sw.0error_found = 1
         return
         end
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   outtbl "WRITE"
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" outtbl "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         end
      end
   else "TBTOP" outtbl
   "LIBDEF  ISPTLIB"

return                                 /*@ ABO_OPEN_OUTPUT           */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   if branch then call BRANCH
   address TSO

   isptlib   = "'"DFLTTLIB('AAMSTR')"'"  /*                         -*/
   sw.0Quiet = SWITCH( "QUIET" )

return                                 /*@ LOCAL_PREINIT             */
/*
. -------------------------------------------------------------------*/
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg; say ""
ex_nam = Left(exec_name,8)
say "  "ex_nam"      copies one already open ISPF table to a new table.        "
say "                Use OPENTBLS to find the name of the source table.        "
say "                                                                          "
say "  Syntax:   "ex_nam"  intblnm                                   (Required)"
say "                      outtblnm                                  (Defaults)"
say "                      ADDKEYS    (mark) kys (mark)                        "
say "                      ADDNAMES   (mark) nms (mark)                        "
say "                ((    QUIET                                               "
say "                                                                          "
say "            intblnm      identifies the source table.  It must already be "
say "                         open.                                            "
say "                                                                          "
say "            outtblnm     defaults to @TMP if not specified.  It will be   "
say "                         written to ISPTABL which must be available.      "
say "                                                                          "
say "                                                 .....more                "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "                                                                          "
say "            kys          specifies any KEY names to be ADDED in the new   "
say "                         table.  'kys' must be preceded and followed by   "
say "                         the same two-character word consisting of any    "
say "                         characters except (of course) x'40'.             "
say "                                                                          "
say "            nms          specifies any NAME names to be ADDED in the new  "
say "                         table.  'nms' must be preceded and followed by   "
say "                         the same two-character word consisting of any    "
say "                         characters except (of course) x'40'.             "
say "                                                                          "
say "            QUIET        (SWITCH in opts) suppresses informational        "
say "                         diagnostic messages                              "
say "                                                                          "
say "                                                 .....more                "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "exec_name" parameters   ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "exec_name" (( BRANCH  TRACE ?R                               "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
